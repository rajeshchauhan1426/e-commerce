generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?        // For email/password authentication
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  accounts          Account[]
  sessions          Session[]
  passwordResetToken String?       // For password recovery
  tokenExpiry       DateTime?  
  stores            Store[]        // One-to-many relation with Store
}

model Account {
  id                 String        @id @default(uuid())
  userId             String
  provider           String        // OAuth provider (e.g., "google", "github")
  providerAccountId  String        // Unique account ID for the provider
  type               String        // Account type (e.g., "oauth", "credentials")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensure no duplicate accounts for the same provider
}

model Session {
  id           String        @id @default(uuid())
  sessionToken String        @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String        @id @default(uuid())
  identifier String        // Email or another identifier
  token      String        @unique
  expires    DateTime
}

model Store {
  id          String    @id @default(uuid())
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [id]) // One-to-many relation with
  billboards  Billboard[] @relation("StoreToBillboard")
  categories    Category[]  @relation("StoreToCategory")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Billboard{
  id String  @id @default(uuid())
  storeId String
  store  Store @relation("StoreToBillboard", fields: [storeId] , references: [id])
  label String
  imageUrl String []
  categories Category[]
  createdUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model Category{
id String @id @default(uuid())
storeId String
store Store @relation("StoreToCategory", fields: [storeId], references: [id])
billboardId String
billboard Billboard @relation(fields: [billboardId], references: [id])
name String
createdAt DateTime @default(now())
updatedAt DateTime @default(now())

@@index([storeId])
@@index([billboardId])

}